class Trie:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.children={}
    
#     def Add(self,prefix):
#         if prefix not in self.children:
#             self.children[prefix]=self.children
#         return self.children[prefix]
    
#     def Get(self,prefix):
#         if(prefix not in self.children):
#             return None
#         return self.children[prefix]
    
    def insert(self, word: str) -> None:
        """
        Inserts a word into the trie.
        """
        
        def helper(c,table):
            if c not in table:
                table[c]={}
            return table[c]
        
        table=self.children
        
        for c in word:
            table=helper(c,table)
        table['@']={}
        
        
    def search(self, word: str) -> bool:
        """
        Returns if the word is in the trie.
        """
        
        def helper(c,table):
            if c not in table:
                return None
            return table[c]
        
        table=self.children
        for c in word:
            table=helper(c,table)
            
            if table is None:
                return False
            
        return ('@' in table)
            

    def startsWith(self, prefix: str) -> bool:
        """
        Returns if there is any word in the trie that starts with the given prefix.
        """
        
        def helper(c,table):
            if c in table:
                return table[c]
            else:
                return None
            
        table=self.children
        for c in prefix:
            table=helper(c,table)
            if table is None:
                return False    
        return True


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
